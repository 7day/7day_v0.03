/* Questo modulo servirà per eseguire le istruzioni SQL sul DB *//* Questa funzione ha il compito di reperire l'istruzione SQL da eseguire */exports.readSqlText = function readSqlText (sqlcod) {		var stmt = ds.SqlFactory.find("sqlcod == :1", sqlcod);	if(stmt!=null)	{	   return stmt.sqlstmt;	}	else	{		console.error("ERR: Istruzione SQL non trovata: ", sqlcod);		return "ERR: Istruzione SQL non trovata: "+ sqlcod	}	};/*     Questa funzione ha il compito di eseguire delle istruzioni di modifica    sul db (insert, update, delete) che sono memorizzate nella tabella    SqlFactory. E' da ottimizzare. Si potrebbero utilizzare degli array     associativi.        var field = [];	field[0]=new Array("<D1CODAZIE>","N",1);	field[1]=new Array("<D1CODMENU>","S",$$('d1codmenu').getValue());	field[2]=new Array("<D1DESMUBR>","S",$$('d1desmubr').getValue());	field[3]=new Array("<D1DESMUDL>","S",$$('d1desmudl').getValue());	field[4]=new Array("<D1GENNOTE>","S",$$('d1gennote').getValue());        Nel primo elemento mettiamo il marker da sostiruire, poi c'è il tipo    del campo ed infine il valore.    */exports.updateDB = function updateDB (stmt, connectionParams, field) {		try	{		debugger;						var dbconn = require('waf-mysql');		var utils = require('core/Utils');	    var connection= dbconn.connect(connectionParams);		    /* Preparo la query */	    	    for(i=0;i<field.length;i++)	    {	    		    	if(field[i][1]=="S") //Stringa	    	{	    		stmt = utils.FindAndReplace(stmt,	    		                            field[i][0],	    		                            utils.formatStringDb(field[i][2]));	    	}	    	else if (field[i][1]=="N") //Numero	    	{	    	    stmt = utils.FindAndReplace(stmt,	    		                            field[i][0],	    		                            utils.formatNumberDb(field[i][2]));	    	}	    	else if(field[i][1]=="D") //Data	    	{	    	    stmt = utils.FindAndReplace(stmt,		    		                        field[i][0],		    		                        utils.formatDateDb(field[i][2]));	    	}	    			    }	    	    	    connection.execute(stmt);	    connection.close();	    return "Aggiornamento eseguito";	}	catch(err)	{		        console.error("Aggiornamento fallito", err.message);		return err.message;	}}/*     Questa funzione ha il compito di eseguire delle istruzioni SQL per leggere    i dati dalle tabelle. Le istruzioni si troveranno sempre memorizzate nella    tabella SqlFactory */exports.selectDB = function selectDB (stmt, connectionParams, field) {		try	{		debugger;						var dbconn = require('waf-mysql');		var utils = require('core/Utils');	    var connection= dbconn.connect(connectionParams);	    var res, result;		    /* Preparo la query */	    	    for(i=0;i<field.length;i++)	    {	    		    	if(field[i][1]=="S") //Stringa	    	{	    		stmt = utils.FindAndReplace(stmt,	    		                            field[i][0],	    		                            utils.formatStringDb(field[i][2]));	    	}	    	else if (field[i][1]=="N") //Numero	    	{	    	    stmt = utils.FindAndReplace(stmt,	    		                            field[i][0],	    		                            utils.formatNumberDb(field[i][2]));	    	}	    	else if(field[i][1]=="D") //Data	    	{	    	    stmt = utils.FindAndReplace(stmt,		    		                        field[i][0],		    		                        utils.formatDateDb(field[i][2]));	    	}	    			    }	    	    res = connection.execute(stmt);		result = res.getAllRows();	    connection.close();	    	    return result;	}	catch(err)	{		        console.error("Errore in lettura tabella", err.message);		return err.message;	}		}/*    Questa funzione ha il compito di comporre in modo dinamico una istruzione    SQL di select.        tabella=tabelle principate da leggere        campiselect=elenco dei campi da leggere        join=tabelle in join da utilizzare        campiand=selezione campi in and (campo, tipo, operatore, valore1)        campior=selezione campi in or (campo, tipo, operatore, valore1)        campiorder=campi di ordinamento*/exports.findDB = function findDB (connectionParams, table, fieldselect, join, fieldand, fieldor, fieldorder) {		try	{		debugger;				var dbconn = require('waf-mysql');		var utils = require('core/Utils');		var query="select";		var primogiroAnd=true;		var primogiroOr=true;		var chiudoOr;		var connection= dbconn.connect(connectionParams);	    var res, result;								/* Campi da leggere */		query = query + " " + fieldselect;				/* Tabella principale */		query = query + " " + "from" + " " + table;				/* Tabelle in join */		for(i=0;i<join.length;i++)		{			query = query + " " + join[i];		}				/* Gestisco i campi di selezione AND */		for(i=0;i<fieldand.length;i++)		{			if (primogiroAnd)			{				query = query + " " + "where";						}					    if(fieldand[i][1]=="S") //Stringa		    {		    	query = query + (primogiroAnd==true?" ":" and ") + fieldand[i][0] + " " + fieldand[i][2] + " " + utils.formatStringDb(fieldand[i][3]);		    }		    else if (fieldand[i][1]=="N") //Numero		    {		    	query = query + (primogiroAnd==true?" ":" and ") + fieldand[i][0] + " " + fieldand[i][2] + " " + utils.formatNumberDb(fieldand[i][3]);		    }		    else if(fieldand[i][1]=="D") //Data		    {		    	query = query + (primogiroAnd==true?" ":" and ") + fieldand[i][0] + " " + fieldand[i][2] + " " + utils.formatNumberDb(fieldand[i][3]);		    }						primogiroAnd=false;		}				if(fieldor.length>0)		{			/* Gestisco i campi di selezione OR */			if(!primogiroAnd)			{				query = query + " " + " and (";				chiudoOr=")"; 			}			else			{				query = query + " " + "where";				chiudoOr="";			}									/* Gestisco i campi di selezione OR */			for(i=0;i<fieldor.length;i++)			{								if(fieldor[i][1]=="S") //Stringa			    {			    	query = query + (primogiroOr==true?" ":" or ") + fieldor[i][0] + " " + fieldor[i][2] + " " + utils.formatStringDb(fieldor[i][3]);			    }			    else if (campior[i][1]=="N") //Numero			    {			    	query = query + (primogiroOr==true?" ":" or ") + fieldor[i][0] + " " + fieldor[i][2] + " " + utils.formatNumberDb(fieldor[i][3]);			    }			    else if(campior[i][1]=="D") //Data			    {			    	query = query + (primogiroOr==true?" ":" or ") + fieldor[i][0] + " " + fieldor[i][2] + " " + utils.formatNumberDb(fieldor[i][3]);			    }								primogiroOr=false;							}						query = query + " " + chiudoOr;		}				/* Aggoingo ordinamento */		query = query + " " + " order by " + fieldorder;				    res = connection.execute(query);		result = res.getAllRows();	    connection.close();	    	    return result;			}	catch(err)	{		        console.error("Errore in lettura tabella", err.message);		return err.message;	}		}